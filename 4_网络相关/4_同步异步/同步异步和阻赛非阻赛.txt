



阻塞非阻塞说的程序在等待调用结果（消息，返回值）时的状态；描述的是状态。
（阻塞和非阻塞强调的是客户端会不会继续执行）

阻塞： 程序在等待调用结果（消息，返回值）时的状态.
非阻塞：该调用不会阻塞当前线程，发送方进程调用send()后，可以继续往下执行。
（就是不能立刻得到结果之前，该调用不会阻塞当前线程。）




同步和异步说的是消息的通知机制；描述的是行为方式。
同步与异步是对应于调用者与被调用者，两个线程之间要么是同步的，要么是异步的


同步：线程调用IO接口后，在没有得到结果前，该调用就不会返回。
正常的编写的函数都是同步的，阻赛型io，
调用了之后，需要等待这个结果返回，然后才能执行后面的代码。

同步也有非阻赛io，可以采用轮询的方式来。（效率低下，浪费cpu资源）
（轮训调用接口，继续往下执行，拿到接口后，进行处理）

同步是轮询，异步使用查询和回调！
同步和异步接口都是http，短链。



异步：线程调用IO接口后，这个调用就先返回了一个，服务器接着计算，然后再通过方式获得结果。
异步不会阻塞，因为会立即返回一个。
（异步阻塞，如果返回了，线程还继续一直等真实的结果，就是异步阻塞了，没有效率，实际不应用）


异步接口实现的机制：
1.客户端用查询接口进行查询（只是单次查询）
https://blog.csdn.net/weixin_32348697/article/details/114174188
客户端：进行请求，会立即返回，再通过多线程的方式获取真实数据返回。
服务器：先返回取货凭证，返回进行计算，计算返回真实的货物。

客户端这里用多线程，多线程是实现异步的方式。


2.同步调用，异步返回，请求的参数有一个回调地址。
服务器处理之后通过这个地址返回信息给你。（客户端需要起一个服务？）
调用方会给被调用方提供一个回调接口，意思是“你处理时间比较长，
等你处理完以后，再调用这个回调接口，通知我结果吧！”


有了mq，不需要进行写一个查询接口，或者写一个回调地址来接收。
消费者处理完成后，会给mq发消息。
生成者（直接导入包），直接监听mq是否处理了。



（3.我们写服务器的接口一般都是异步/非阻塞的，因为需要同时处理多个用户，
不能处理某一个用户然后其他的用户不处理了。）


异步接口的意思是指发送方发送Message后，接口方会立刻返回是否成功接收信息的返回，
一般状态是202 Accepted，但是接收方在接收到Message后，不会立刻执行，
或者执行需要一定的时间，没有办法立刻返回执行结果，比较完善的接口会在执行完成后，
再请求发送方接口，把数据返回，
也有些接口是需要发送方在一定时间后再次执行查询，获取接口执行结果。
异步接口多用于数据处理比较大，或者需要流程处理的系统





