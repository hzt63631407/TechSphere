

总结：
websocket是长连接，一般用于聊天场景。
比如说：有2个用户，
1.其中一个用户发送消息，用send函数，然后用recv函数进行等待。（发的消息指定用户）
2.另一个用户用recv函数进行接收到，然后用send发送函数。
3.第一个用户能够用recv函数收到。

（web-socket在socket外面又报了一层，更多应用与web应用）



我用python做过websocket的自动化

websocket需要先通过http建立连接，连接成功后就不通过http连接了。
http是短连接，需要客户端主动发起，发起后断开。
websocket是长连接，连接一直保持，可以由服务器主动发起。

websocket协议，连接建立，不会自动介绍，需要用代码控制结束。

而长连接就必须依赖心跳包等维持连接，让服务器知道客户端还活者。

微信消息、直播间聊天，消息/通知推送————即时性高的场景。




复合业务场景【聊天室】——需要代码
复杂之处在于
1.角色：服务器，模拟a用户，模拟b用户

websocket-client
ws = create_connection("ws://127.0.0.1:18004/websocket/nick")  （也是url）

发送消息数据  json数据
ws.send("{from:nick,
    to:tony,
    text:hello,i am nick}
")

ws.recv()   接受服务器数据
web_socket 是在socket应用之上的。

websocket有recv函数，相当于有while true主线程一直进行,
需要新开一个threading线程。



接口测试，脚本编写——数据处理发送错误，一般都是数据抽取有问题。

你之前怎么做websocket自动化测试
1.理解自动化模拟人工的操作，用代码实现同样的效果。

2.梳理业务流程操作
a.测试目标——业务需求，测试聊天室能否正常工作
b.至少两个用户在线，tony，nick
c.用户a发消息给用户b
d.用户b收到消息后回复用户a
e.判断依据，用户a是否能够收到用户b的回复。

3.转换为脚本编写思路
a.代码编写-伪代码/编写思路

4.具体的写脚本
利用掌握的技术去实现逻辑
碰到问题-解决思路
接口测试 脚本编写 数据处理发送错误，一般都是数据抽取有问题
接口测试最重要一点：梳理清楚数据的流程以及掌握接口文档的内容。





