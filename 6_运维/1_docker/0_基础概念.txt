



一、docker和虚拟机的区别
虚拟机（Virtual Machine）：虚拟机是一种完整的操作系统运行在虚拟化层之上的软件实例。
它通过在宿主机上模拟硬件层来创建一个独立的虚拟环境，每个虚拟机都有自己的操作系统内核和资源管理。
虚拟机通常需要较大的资源开销，包括磁盘空间、内存和处理器等，并且启动时间较长。

Docker：Docker是一种容器化平台，它利用容器来实现应用程序的隔离和部署。
Docker利用操作系统层面的虚拟化技术，共享主机操作系统的内核，
每个容器包含一个应用程序及其所有依赖项。
与虚拟机相比，Docker容器更加轻量级、快速启动和高效利用资源。

操作系统一样，依赖一样，防止tomcat版本，jdk版本等不一致，完成持续交付和部署。




二、docker的优点
轻量级和高性能：
Docker容器与宿主机共享操作系统内核，避免了虚拟机的资源开销和性能损耗，
使得容器更加轻量级且具有较高的性能。

快速部署和扩展：
Docker容器可以快速启动、停止和重启，容易进行应用程序的部署和扩展。
容器化的应用程序可以在不同的环境中以相同的方式运行，提供了更好的可移植性和一致性。

环境隔离和安全性：Docker容器提供了应用程序间的隔离，
每个容器都有自己的文件系统、进程空间和网络接口。
这种隔离性有助于确保应用程序和依赖项之间的互不干扰，并提高安全性。

生态系统和易用性：Docker拥有庞大的生态系统和广泛的支持，
提供了丰富的容器镜像和工具，使得容器的创建、共享和管理变得简单和方便。




三、为什么会有docker出现
是为了解决应用程序部署和环境一致性的挑战。
传统的部署方式可能面临着环境依赖、版本冲突和部署复杂性等问题。
Docker的出现使得应用程序可以以容器的形式打包，
并在不同的环境中以相同的方式运行，提供了更好的可移植性和一致性。
同时，Docker还简化了应用程序的部署和管理，提高了开发人员和运维人员的效率。





三、docker、镜像、容器概念
1.docker是一个开源软件。
2.别人用docker创建了一个mysql的镜像，
3.我拉取到本地，用这个镜像创建了一个容器。





将mysql和tomcat分开便于模块化编程，相当于给你很多零件，
你自己组装就好了。不然，假如我只想搭建一个Tomcat镜像，
却必须拉取Tomcat+mysql镜像，多麻烦。
给你独立的两个mysql和tomcat镜像，你可以自己组装镜像。
也就是说，你也可以组装一个mysql+tomcat镜像，然后发布出去。




docker
物理机：拆成4个虚拟机，有操作系统和环境，每个虚拟机运行一个app，java服务。
但是运行可能占不了一个虚拟机的机器。
docker：
更高校的利用系统资源。
更快速的启动。
提供一致的运行环境，整体打包。操作系统一样，依赖一样。防止tomcat版本，jdk版本等不一致。
完成持续交付和部署。



仓库：存放镜像的仓库（各种配置好的环境） 一般在远程
镜像：只读模版。
容器：实际使用，如果说镜像是class，那么容器就是object。
本地用pull命令把镜像拉下来，用镜像创建容器。

拉取tamcat，放本地的java web程序，然后可以打包成镜像，传送到仓库。
（一个容器是否能够同时安装mysql和tomcat redis之类？目前理解是不可以）


场景1.安装mysql数据库
1.在仓库中寻找镜像
2.下载镜像到本地
docker pull mysql:5.6
3.启动容器
docker run mysql:5.6
docker run mysql:5.6 -e mysql_root_password=1234567

外部不能支持访问容器的端口，需要访问宿主机的端口，做映射。
端口映射：
把容器的端口转到宿主机的端口，这样访问宿主机端口
的时候最终会访问到容器的端口。

4.docker ps 查看进程
id和名字都是随机的
有3306/tcp
5.docker run -p 5306:3306 mysql:5.6


6.-v  文件挂载 把u盘挂到系统上

如何把U盘文件挂载到系统文件中？
1、我们在文件根目录下新建一个目录 /sdb-u，通过挂载命令将 U 盘文件系统挂载到此目录。
https://debuger.blog.csdn.net/article/details/102826285
(指向同一个目录，一个地方修改，另一个地方也修改)


7.把宿主机的（war）文件挂载到docker里面
docker run -d -p 8082:8080 --name tamcat01 -v 本地地址:容器地址 tomcat:8.5


8.查看ip是否一致
进入容器后，ifconfig一下能看到IP和宿主机是一样的。


微服务
每个服务不再占用一台服务器，而是占用一个容器。
这样就不需要多台服务器了，最简单的情况下，本机运行多个容器，
只用一台服务器就实现了面向服务架构，这在以前是做不到的。
这种实现方式就叫做微服务。



