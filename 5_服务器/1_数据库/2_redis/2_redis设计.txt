



一、线程设计
Redis 在默认情况下是单线程的。

Redis 使用单线程模型来处理客户端请求。
这意味着 Redis 会使用一个主线程来顺序地执行客户端发送的请求。

这种设计选择带来了一些优点：

简单高效：单线程模型避免了多线程之间的竞争和同步开销，使得 Redis 的实现更加简单和高效。

避免上下文切换：由于单线程模型，Redis 不需要进行频繁的上下文切换，
从而减少了操作系统的负担，提高了性能。

然而，虽然 Redis 的主线程是单线程的，但它通过使用非阻塞的 I/O 多路复用机制来实现高并发处理。
这意味着 Redis 能够同时处理多个客户端的请求，而不会被 I/O 操作所阻塞。

此外，Redis 也提供了一些在后台运行的线程，用于执行一些耗时的操作，如持久化数据到磁盘或进行主从复制。
这些后台线程并不处理客户端的请求，因此 Redis 的核心功能仍然是在单线程上运行。

需要注意的是，Redis 也提供了一些配置选项，如开启多个子进程来利用多核处理器的能力，
以提高并发性能。这种方式下，每个子进程都会有自己的单线程实例，并独立地处理客户端请求。
但无论是单线程模型还是多线程模型，Redis 的核心执行逻辑仍然是在每个单独的线程上运行。






二、redis持久化处理：
1.Redis是基于内存的，如果Redis服务器挂了，数据就会丢失。
为了避免数据丢失了，Redis提供了两种持久化方式，RDB和AOF。
2.AOF（append only file） 持久化，
采用日志的形式来记录每个写操作，追加到AOF文件的末尾。
优点：数据的一致性和完整性更高，秒级数据丢失。
缺点：相同的数据集，AOF文件体积大于RDB文件。数据恢复也比较慢。
3.RDB，
就是把内存数据以快照的形式保存到磁盘上。
和AOF相比，它记录的是某一时刻的数据，，并不是操作。
什么是快照?可以这样理解，给当前时刻的数据，拍一张照片，然后保存下来。
优点：与AOF相比，恢复大数据集的时候会更快，
它适合大规模的数据恢复场景，如备份，全量复制等
缺点：没办法做到实时持久化/秒级持久化。





三、场景设计
redis 在生产当中一般有四种场景：单机，主从，哨兵，集群，现在是用集群

集群+主从 一主两从

集群中的每个节点都有1个至N个复制品，其中一个为主节点，其余的为从节点，
如果主节点下线了，集群就会把这个主节点的一个从节点设置为新的主节点继续工作，
这样集群就不会因为一个主节点的下线而无法正常工作。

Redis集群引入了主从模式，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点

节点A覆盖1365-5460
节点B覆盖6827-10922
节点C覆盖12288-16383
节点D覆盖0-1364,5461-6826,10923-12287







