



一、索引
1.什么是索引
帮助MySQL高效的查询出数据的数据结构叫做索引，索引就是一种数据结构。
什么形式存在？数据结构，二叉树形式。

索引类似于新华字典的偏盘，提高数据检索的效率。
sql先查找索引，再找对应的数据
和数据分开的，需要单独创建，前期创建，后期非常慢

索引是对数据库表中一列或多列的值进行排序的数据结构。





2.索引类型：
普通索引: 是最基本的索引，它没有任何限制
唯一索引: 索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一
主键索引: 是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。
组合索引: 一个索引包含多个列，实际开发中推荐使用组合索引。
全文索引: 全文搜索的索引。

https://www.jianshu.com/p/643850f684db
聚簇索引：
1.表数据按顺序存储，即索引顺序和表记录物理存储顺序一致。
2.在一个表中只能有一个聚簇索引，因为真实物理存储顺序只能有一种。
3.聚簇索引 叶子节点存储数据行和B-Tree索引。
4.聚簇索引是稀疏索引，数据页上一级索引存储是页指针，非行指针。

非聚簇索引：
1.表数据存储顺序与索引顺序无关。
2.对于非聚簇索引，叶节点包含行主键值和主键值作为指向行的“指针”，
通过二级索引查找，两次B-Tree查找 InnoDB自适应哈希索引能够减少这样重复工作。
3.非聚簇索引是密集索引，在数据页的上一级索引页它为每一个数据行存储一条记录




3.原理：
索引就是通过事先排好序，从而在查找时可以应用二分查找等高效率的算法。
一般的顺序查找，复杂度为O(n)，而二分查找复杂度为O(log2n)。
当n很大时，二者的效率相差及其悬殊。

举个例子：
表中有一百万条数据，需要在其中寻找一条特定id的数据。如果顺序查找，
平均需要查找50万条数据。而用二分法，至多不超过20次就能找到。
二者的效率差了2.5万倍！





4.索引优缺点：
优点
1.提高数据检索的效率，降低数据库IO成本。
2.通过索引对数据进行排序，降低数据的排序成本，降低CPU的消耗。
缺点：
1.建立索引需要占用物理空间
2.会降低表的增删改的效率，因为每次对表记录进行增删改，
需要进行动态维护索引，导致增删改时间变长




5.什么时候创建索引：
1.早期的时候创建
2.出现慢查询日志，与原来对比，sql变慢
不创建：
1.经常增删改的字段
2.唯一性太差的字段，不适合单独创建索引。
3.索引不应该用在小型表上。




6.如何创建索引
CREATE INDEX indexName ON mytable(username(length));
（可瑞诶特）

在MySQL中，索引（index）也叫做“键（key）”

create table people (
    id int unsigned not null auto_increment primary key comment '主键id',
    gender tinyint unsigned not null default 3 comment '性别：1男，2女，3未知',
    key(last_name, first_name, birthday)
)





7.哪些字段创建
1.表的主键，外键
2.在order by 或 group by 或 count/max 后面的字段
3.经常出现在where子句中的字段应该建立索引
4.针对数据量大，且查询比较频繁的表建立索引





8.索引结构
MySQL通过存储引擎取数据，基本上90%的人用的就是InnoDB了
B+树和哈希表：
1.n棵子tree的节点包含n个关键字，不用来保存数据而是保存数据的索引。
2.似于数据结构中简单实现的HASH表（散列表）一样，
当我们在MySQL中用哈希索引时，主要就是通过Hash算法
（常见的Hash算法有直接定址法、平方取中法、折叠法、除数取余法、随机数法），
将数据库字段数据转换成定长的Hash值，
3.聚簇索引就是按照每张表的主键构造一颗B+树
4.普通索引也叫二级索引，除聚簇索引外的索引，即非聚簇索引。





9.扩展
如何判断索引有没有生效
在需要执行查询的语句前面添加关键词explain即可
查询时，如果name是索引，那么key显示name
https://blog.csdn.net/u011298909/article/details/120567849


索引底层原理：
https://www.cnblogs.com/wl-blog/p/15186926.html
https://www.cnblogs.com/aspwebchh/p/6652855.html

（稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。）

