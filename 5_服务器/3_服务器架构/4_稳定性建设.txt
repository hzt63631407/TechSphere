
服务端稳定性建设：
1.平时的架构设计好
缓存、削峰
2.各种预案，错容技术
限流、隔离、降级、熔断、扩容
3.完善的监控体系
4.快速响应的能力，故障处理流程



缓存策略
https://www.cnblogs.com/yaozhengqi/p/5601338.html

线上故障处理：
https://blog.csdn.net/zhongdianjinxin/article/details/125591846


服务治理，高可用，高错容


5.降级？
当 Service A 调用 Service B，失败多次达到一定阀值，
Service A 不会再去调 Service B，而会去执行本地的降级方法！
对于这么一套机制:在 Spring cloud 中结合 Hystrix，将其称为熔断降级!

https://smile.blog.csdn.net/article/details/81230412

页面降级 —— 可视化界面禁用点击按钮、调整静态页面
延迟服务 —— 如定时任务延迟处理、消息入MQ后延迟处理
写降级 —— 直接禁止相关写操作的服务请求
读降级 —— 直接禁止相关度的服务请求
缓存降级 —— 使用缓存方式来降级部分读频繁的服务接口

针对后端代码层面的降级处理策略，则我们通常使用以下几种处理措施进行降级处理：
抛异常
返回NULL
调用Mock数据
调用Fallback处理逻辑




服务器异常相关（故障演练）
1.看有没有请求接口
2.接口超时，(给出合理的提示)（原因，网络波动，服务器处理不过来）
3.丢包严重（询问运维，是否有网络波动）
4.接口404或者502
404可能是nginx配置代理的路径不对
502可能是nginx挂掉了（nginx处理不过来）
5.接口返回了异常的错误码
正常的result是1，这些异常需要前端/客户端有友好的提示。
1007
1008
6.数据库，服务器挂了



预案
预案分类：容量不足的预案，比如降级，比如封禁，比如限流。
功能的预案，比如切流，比如静态化，比如直接摘除。
等等预案一定要经过演练才能保障最终的可靠。



切流是最常用的一种手段
通过常用稳定性保障手段如资源扩容、限流、熔断、降级、兜底、资源隔离等



7.服务器稳定性
https://testerhome.com/articles/21178

