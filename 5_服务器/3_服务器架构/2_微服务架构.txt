



微服务架构
springcloud
注册中心，服务发现（配置中心）


整个后端架构：
（网关层，nginx）+java程序（springcloud）+redis，mq+mysql


微服务就是一个独立的职责单一的服务应用程序

分布式：一个请求由多个系统协同进行处理



如何搭建测试环境：
是只lnmp环境搭建
1.申请服务器，云服务器，
（看是那种的形式，如果是docker的，那么直接拉取镜像就好了）
2.然后就是安装jdk，mysql这些软件，然后再启动jar包，或者其他语言写的包
3.配置环境变量，liunx环境就是在/etc/profile这个路径下
4.接着就是把各个接口调通
5.最后一步就是客户端连接过来，客户端可以开发一个界面，能够切换不同的界面




2.1、从服务提供者的角度看：

当服务提供者启动的时候，需要将自己提供的服务注册到指定的注册中心，
以便服务消费者能够通过服务注册中心进行查找；

当服务提供者由于各种原因致使提供的服务停止时，需要向注册中心注销停止的服务；

服务的提供者需要定期向服务注册中心发送心跳检测，
服务注册中心如果一段时间未收到来自服务提供者的心跳后，
认为该服务提供者已经停止服务，则将该服务从注册中心上去掉。

2.2、从调用者的角度看：

服务的调用者启动的时候根据自己订阅的服务向服务注册中心查找服务提供者的地址等信息；

当服务调用者消费的服务上线或者下线的时候，注册中心会告知该服务的调用者；

服务调用者下线的时候，则取消订阅。




1、微服务之间是如何通讯的？
同步通信：dobbo通过RPC远程过程调用、springcloud通过http接口等。
异步：消息队列，如：RabbitMq、ActiveM、Kafka 等。

微服务接口测试步骤
微服务设计的项目一般都是基于分布式服务的注册和发现机制的，
所有的服务都是在一个注册中心集中存储的。



2.微服务接口测试
方案1 springcloud微服务接口，开起http接口，jmeter，postman。
方案2 dubbo（微服务的RPC框架），RPC远程过程调用，底层采用tcp连接，dubbo协议。
方案3 grpc
dubbo是内部服务，服务器与服务器之间通信的接口。
jmeter不支持，通过下来插件，打包jar包，测试dubbo


3.SpringCloud 和 Dubbo 有哪些区别？
1.dubbo是rpc，SpringCloud是http
2.SpringCloud是一整套框架，dubbo是一个小型框架
（我们的是springclud）


grpc
https://blog.csdn.net/qq_41577750/article/details/122057468

定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。
在服务端实现这个接口，并运行一个 gRPC服务器来处理客户端调用。



4.SpringCloud包括哪些
springcloud由什么组成
Spring Cloud Eureka：服务注册与发现
Spring Cloud Zuul：服务网关
Spring Cloud Ribbon：客户端负载均衡
Spring Cloud Feign：声明性的Web服务客户端
Spring Cloud Hystrix：断路器
Spring Cloud Confifig：分布式统一配置管理
（mq）

注册中心：
服务a请求注册中心，注册中心再请求服务b

服务注册与发现：
服务注册，就是将提供某个服务的模块信息(通常是这个服务的ip和端口)
注册到1个公共的组件上去(比如: zookeeper\consul)。
（系统部署的时候需要配置注册中心的地址和ip）

服务发现，就是新注册的这个服务模块能够及时的被其他调用者发现。
不管是服务新增和服务删减都能实现自动发现。



什么是服务配置中心
配置中心：顾名思义，就是用来统一管理项目中所有配置的系统。
传统项目中配置所面临的问题
一般是静态化配，更新配置后，项目需要重启
配置文件无法区分环境。
配置文件过于分散。

springcloud有配置中心，配置中心本质也是一个微服务
同样注册到服务注册中心（eureka）依瑞卡
通过修改gut仓库中的配置文件实现所有微服务的配置文件的修改。

Eureka包含两个组件：Eureka Server和Eureka Client。
在Eureka Client启动的时候，将自身的服务的信息发送到Eureka Server，
同时也会从Eureka Server下载服务注册信息保存到Eureka Client缓存中。
当服务间相互调用其它服务时，
在Eureka Client中获取服务信息（如服务地址，端口等）后，实现服务之间的交互。

网关的作用
1.负载均衡
2.日志
3.熔断
4.对外统一接口

Ribbon的负载均衡原理
简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，
Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）
去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法,
将请求平摊的分配到多个服务上，从而达到系统的高可用。


4、请谈谈对SpringBoot 和SpringCloud的理解
① SpringBoot专注于快速方便的开发单个个体微服务。

② SpringCloud是关注全局的微服务协调整理治理框架，
它将SpringBoot开发的一个个单体微服务整合并管理起来，
为各个微服务之间提供，配置管理、服务发现、断路器、路由、
微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务


分布式系统面临的
服务雪崩
多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，
微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。
如果扇出的链路上某个微服务的调用响应时间过长或者不可用，
对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.

① 熔断模式：这种模式主要是参考电路熔断，如果一条线路电压过高，
保险丝会熔断，防止火灾。放到我们的系统中，如果某个目标服务调用慢或者有大量超时，
此时，熔断该服务的调用，对于后续调用请求，不在继续调用目标服务，
直接返回，快速释放资源。如果目标服务情况好转则恢复调用。

② 隔离模式：这种模式就像对系统请求按类型划分成一个个小岛的一样，
当某个小岛被火少光了，不会影响到其他的小岛。例如可以对不同类型的请求使用线程池来资源隔离，
每种类型的请求互不影响，如果一种类型的请求线程资源耗尽，则对后续的该类型请求直接返回，
不再调用后续资源。这种模式使用场景非常多，例如将一个服务拆开，
对于重要的服务使用单独服务器来部署，再或者公司最近推广的多中心。

③ 限流模式：上述的熔断模式和隔离模式都属于出错后的容错处理机制，
而限流模式则可以称为预防模式。限流模式主要是提前对各个类型的请求设置最高的QPS阈值，
若高于设置的阈值则对该请求直接返回，不再调用后续资源。
这种模式不能解决服务依赖的问题，只能解决系统整体资源分配问题，
因为没有被限流的请求依然有可能造成雪崩效应。

