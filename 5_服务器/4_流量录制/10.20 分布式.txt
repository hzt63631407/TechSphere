互联网技术发展体系
v1.0 单体应用 程序+数据库
v2.0 应用集群 负载均衡
v3.0 数据库集群 分库分表 数据库太贵
v4.0 缓存架构  查询场景多 redis
v5.0 mq 消息队列  更新数据也多
v6.0 分布式系统架构
应用的功能越来越多 传统架构 一个jar包 可能要更新1000个服务器
出发点：系统可维护、拓展性，不是为了功能
把一个大的系统拆分为多个系统
（用户，商品，订单，会员功能）
（理发：洗剪吹三个人）


分布式微服务架构
分布式：一个请求处理由多个系统协同完成
微服务：是一种分布式系统的架构方式，将大的应用拆分成N个小服务。
本质也是分布式架构。微服务是分布式的子集

rpc：因为系统拆分之后，需要进行远程的调用
rpc泛指能够实现远程数据交互的接口实现技术
1.http
2.grpc
3.dubbo-rpc

服务调用者：在程序运行过程中，需要调用其他服务
服务提供着：提高了可访问的rpc

接口调用：需要网络ip+端口
（实际过程中不是硬编码，不会写死）



服务发现机制
消费者调用接口的时候，不会指定接口的ip和端口

当系统需要对外提供一个rpc接口调用服务的时候
启动之后，自动将自身的ip信息，端口信息，接口信息，
提交到一个叫做"注册中心"去保存起来。

dubbo是一个java包，提供者和消费者都需要导入运行。


（现实：在美团上搜找吃饭的地方）

注册中心（一个独立的程序，如：java程序）
1.nacos
2.zookeeper
3.eureka

java后端开发，生态完善
go，docker
python，软件测试体系完善，机器学习，数据分析

应用程序的代码，有注册中心的配置（如ip，地址）


测试人员
1.有些公司要求对单独子系统的服务进行接口测试（dubbo，grpc）
jemter下载dubbo插件
注册中心
192.168.1.110:8848
接口服务示例：com.hctestedu.service 方法addintergel
如果版本不一致，会出现调用错误

1个接口可能有多个方法，可以进行多个单元测试



springcloud微服务是一整套系统
包括：注册中心，mq，网关(nginx)，
springcloud实现rpc的是http

dubbo，类似于flask，专注api接口开发
springcloud，类似django，不仅api开发，还有其他的功能




性能测试角度
用了微服务，性能反而会下降，因为链路变长了。
http是目前实现中性能比较差的（dubbo，grpc比较高）
http是比较通用，兼容设备，还有cookie和session。
但是服务之间不需要这些。

集群服务的调用方式：客户端负载均衡，
服务器负载均衡：nginx
客户端负载均可：服务调用者从注册中心查询多个服务器，客户端本身内部代码自己实现。
性能测试时，要关注服务提供者的集群服务器资源是否均衡。

