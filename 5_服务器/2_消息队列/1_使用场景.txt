



一、使用场景（优点）
应用场景：跨数据传递，日志分析，用户行为分析

1.应用解藕
难点：
A 系统发送数据到 BCD 三个系统，通过接口调用发送。
如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？
解决：
如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，
哪个系统需要数据自己去 MQ 里面消费。
如果新系统需要数据，直接从 MQ 里消费即可；



2.异步处理
难点：
A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库。
解决：
如果使用 MQ，那么 A 系统连续发送 3 条消息到 MQ 队列中，
耗时 5ms，BCD再从数据库里取
（如果前端的功能调用的是异步接口，那么？如何确定接口实际操作完成了，
会配套异步查询。例如：双11，提交支付，【已提交，确认中】）

应用场景：网站用户注册，将注册信息写入数据库成功后，发送注册邮件和注册短信.
写到数据库（生产者），发送到mq，然后（注册邮件，注册短信）消费者来进行处理。



3.流量削峰
难点：
前端大量的请求，直接到数据库
解决：
前端请求传过来，要提交数据，先到mq，再到mysql
mq服务比数据库操作快的原因：是因为没有约束，没有索引，不去校验表


缺点
系统可用性降低：
你加个 MQ 进来，万一 MQ 挂了咋整？MQ 一挂，整套系统崩溃。
系统复杂度变高：
怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？
一致性问题：
要是 BCD 三个系统那里，BD 两个系统写库成功了，
结果 C 系统写库失败了，咋整？你这数据就不一致了。


削峰处理，mq尽快的处理请求，然后再慢慢写入到mysql
应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。
为解决这个问题，一般需要在应用前端加入消息队列。
可以控制活动的人数；可以缓解短时间内高流量压垮应用；





二、mq介绍
https://zhuanlan.zhihu.com/p/385564213
https://blog.csdn.net/weixin_52797128/article/details/125888104





