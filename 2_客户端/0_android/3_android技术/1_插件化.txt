




一、插件化：
将整个app拆分成若干模块，其中有1个宿主模块、若干插件模块 。
宿主模块和插件模块可以分开进行编译，二者之间互不影响，各个模块可以并发进行开发。

插件可以理解为免安装的apk，而支持插件的app称为宿主。





二、好处：
①减少安装Apk的体积、按需下载模块
②动态更新插件
③宿主和插件分开编译，提升开发效率





三、插件化原理：
其实 Android 系统在打开应用之后，也只是开始进程，
然后使用ClassLoader加载 classes.dex 至进程中，执行对应的组件而已;
那大家可能会想一个问题，既然 Android 本身也是使用类似反射的形式加载代码执行，
凭什么我们不能执行一个 Apk 中的代码呢?

最显而易见的优势其实就是通过网络热更新、热修复;

双亲委派机制：
ClassLoader在加载类时，先查看自身是否已经加载过该类，如果没有加载过会首先让父加载器去加载，
如果父加载器无法加载该类时，该类才会调用自身的findClass方法去加载
https://blog.csdn.net/qq_36390114/article/details/121334799





四、插件化和热修复不是同一个概念，虽然在技术实现的角度来说，
它们都是从系统加载器的角度出发，
通过“欺骗”Android系统的方式来让宿主正常的加载和运行插件/补丁中的内容，
但是它们的出发点是不同的。

插件化是把需要实现的模块或功能独立出来，减少宿主的规模，当需要使用到相应功能时再去加载相应的模块。
热修复则是从修复bug的角度出发，强调的是在不需要二次安装应用的前提下修复已知的bug。
https://blog.csdn.net/zenmela2011/article/details/126304850