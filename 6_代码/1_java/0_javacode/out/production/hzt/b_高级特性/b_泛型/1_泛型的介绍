
https://blog.csdn.net/qq_41701956/article/details/123473592

1.泛型本质：
泛型本质是将数据类型参数化，它通过擦除的方式来实现，
即编译器会在编译期间「擦除」泛型语法并相应的做出一些类型转换动作。


2.泛型的好处
2.1保证了类型的安全性。
添加的属性必须是string，要不就编译就报错.
List<String> arrayList = new ArrayList<String>();
arrayList.add(100); // 不是string类型，在编译阶段，编译器就会报错
2.2消除强制转换，泛型的一个附带好处是，消除源代码中的许多强制类型转换，
这使得代码更加可读，并且减少了出错机会。
ArrayList list  = new ArrayList();
list.add(1);
int i = (int) list.get(0);  // 需强转
ArrayList<Integer> list  = new ArrayList<>();
list.add(1);
int i = list.get(0);  // 无需转换
2.3避免了不必要的装箱、拆箱操作，提高程序的性能
2.4提高了代码的重用性。


3.泛型有三种使用方式，
分别为：泛型类、泛型接口和泛型方法。
3.1泛型类
定义：public class Generic<T>，此处T可以随便写为任意标识
public Generic(T key) {
    this.key = key;
}//泛型构造方法形参key的类型也为T，T的类型由外部指定

Generic<String> genericString = new Generic<String>("key_vlaue");
在实例化泛型类时，必须指定T的具体类型
传入的实参类型需与泛型的类型参数类型相同，即为String.
Generic<Integer> number = new Generic<>(123)
传入的实参类型需与泛型的类型参数类型相同，即为Integer.
Generic的返回类型可以根据传入的参数变化。


3.2泛型接口
泛型接口与泛型类的定义及使用基本相同


3.3泛型方法
泛型类，是在实例化类的时候指明泛型的具体类型；
泛型方法，是在调用方法的时候指明泛型的具体类型。

修饰符 <代表泛型的变量> 返回值类型 方法名(参数){ }
public <T> T genercMethod(T t){
    return t;
}


4通配符
无边界的通配符(Unbounded Wildcards), 就是<?>, 比如List<?>
无边界的通配符的主要作用就是让泛型能够接受未知类型的数据.

固定上边界的通配符(Upper Bounded Wildcards)，采用<? extends E>的形式
使用固定上边界的通配符的泛型, 就能够接受指定类及其子类类型的数据。

固定下边界的通配符(Lower Bounded Wildcards)，采用<? super E>的形式
使用固定下边界的通配符的泛型, 就能够接受指定类及其父类类型的数据.。



5参数
E：Element (在集合中使用，因为集合中存放的是元素)
T：Type（Java 类）
K：Key（键）V：Value（值）
N：Number（数值类型）
？：表示不确定的java类型