

1.什么是迭代器(Iterator)？
迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，
而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。 　

　Java中的Iterator功能比较简单，并且只能单向移动： 　

(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，
它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。 　　

(2) 使用next()获得序列中的下一个元素。 　　

(3) 使用hasNext()检查序列中是否还有元素。 　

(4) 使用remove()将迭代器新返回的元素删除。 　　

Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，

它可以从两个方向遍历List，也可以从List中插入和删除元素。



Java Iterator（迭代器）不是一个集合，
它是一种用于访问集合的方法，
可用于迭代 ArrayList 和 HashSet 等集合。


Java的集合类都可以使用for each循环，
List、Set和Queue会迭代每个元素，Map会迭代每个key。
以List为例：

List<String> list = List.of("Apple", "Orange", "Pear");
for (String s : list) {
    System.out.println(s);
}

实际上，Java编译器并不知道如何遍历List。上述代码能够编译通过，
只是因为编译器把for each循环通过Iterator改写为了普通的for循环：

for (Iterator<String> it = list.iterator(); it.hasNext(); ) {
     String s = it.next();
     System.out.println(s);
}
我们把这种通过Iterator对象遍历集合的模式称为迭代器。


ArrayList可以用索引获取
for (int i=0; i<list.size(); i++) {
    Object value = list.get(i);
}

但是这样一来，调用方就必须知道集合的内部存储结构。并且，
如果把ArrayList换成LinkedList，get(int)方法耗时会随着index的增加而增加。
如果把ArrayList换成Set，上述代码就无法编译，因为Set内部没有索引。
