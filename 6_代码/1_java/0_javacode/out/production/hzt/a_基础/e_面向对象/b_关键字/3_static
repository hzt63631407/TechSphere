



static/静态
static可以修饰变量和方法；
这些变量和方法不属于任何一个实例对象，而是被类的实例对象所共享；
被static修饰的变量或者方法是优先于对象存在的
实例变量：每次创建对象，都会为每个对象分配成员变量内存空间，实例变量是属于实例对象的.
静态不能访问非静态的，非静态的可以去访问静态的。
（因为静态的可以直接用类进行调用，也可以用实例化的对象对其引用）
静态变量存储在方法区,属于类所有.实例变量存储在堆当中,其引用存在当前线程栈



普通字段有一个自己的空间
静态字段共享空间
静态字段和方法（推荐用类名来访问静态）
用static修饰的字段：静态字段，属于class不属于实例
访问静态字段使用：类名.静态字段 不推荐使用实例变量.静态字段
用static修饰的方法：静态方法，属于class不属于实例
访问静态方法使用：类名.静态方法 不推荐使用实例变量.静态方法
静态方法不能访问this变量，但可以访问静态字段
静态方法常用于工具类和辅助方法



static的特点

1.static是一个修复符，用于修饰成员。
2.static修饰的成员被所有的对象所共享。
3.static优先于对象存在，因为static的成员随着类的加载就已经存在了。
4.static修饰的成员多了一种调用方式，就可以直接被类名所调用，类名.静态成员。
5.static修饰的数据是共享数据，对象中存在的是特有数据。


成员变量（实例变量）和静态变量（类变量）的区别？
1.两个变量的生命周期不同。
成员变量随着对象的创建而存在，随着对象的被回收而回收。
静态变量随着类的加载而存在，随着类的消失而消失。
2.调用方式不同。
成员变量只能被对象调用。
静态变量可以被对象调用，还可以被类名调用。
3.别名不同。
成员变量也称为实例变量。
静态变量也称为类变量。
4.数据存储位置不同。
成员变量数据存储在堆内存的对象中，所以也叫对象的特有数据。
静态变量数据存储在方法区（共享数据区）的静态区，所以也教对象的共享数据。


静态使用的注意事项：
1.静态方法只能访问静态成员。（非静态即可以访问静态，又可以访问非静态）
2.静态方法中不使用定义this或者super关键字。
3.主函数是静态的，


静态什么时候用？
1.静态变量。
  当分析对象中所具备的成员变量的值都是相同的。
  这时这个成员就可以被静态修饰。
  只要数据在对象中都是不同的，就是对象的特有数据，必须存储在对象中，是非静态的。
  如果是相同的数据，对象不需要做修改，只需要使用即可，不需要存储在对象中，定义成静态的。

2.静态函数。
  函数是否用静态修饰，就参考一点，就是该函数功能是否有访问到对象中的特有数据。
  简单点说，从源代码看，该功能是否需要访问非静态的成员变量，如果需要，该功能就是非静态的。
  如果不需要，就可以将该功能定义成静态的。当然，也可以定义为非静态，但是非静态需要被对象调用，
  而仅创建对象调用非静态的，没有访问特有数据的方法，该对象的创建是没有意义。



2.”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？
“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。
Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。
static方法跟类的任何实例都不相关，所以概念上不适用。
java中也不可以覆盖private的方法，因为private修饰的变量和方法只能在当前类中使用，
如果是其他的类继承当前类是不能访问到private变量或方法的，当然也不能覆盖。




3.是否可以在static环境中访问非static变量？
static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，
会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，
因为这些变量还没有被创建出来，还没有跟任何实例关联上。