
1.HashMap
最常用的Map，根据键的hashcode值来存储数据（采用链地址法，也就是数组+链表+红黑树的方式）


2.HashTable（基本已被淘汰）

3.LinkedHashMap
它保持了记录的插入顺序（内部维护了一个双向链表），遍历时会通过链来遍历。
有序的

4.TreeMap
实现了SortMap接口，能够把保存的记录按照键排序（默认升序），
也可以指定排序比较器，内部采用红黑树存储数据。
有序的

5.ConcurrentHashMap
ConcurrentHashMap是一个并发散列映射表的实现，
它允许完全并发的读取，并且支持给定数量的并发更新。




17.Java中的HashMap的工作原理是什么？
HashMap的底层是用hash数组和单向链表实现的 ，当调用put方法是，首先计算key的hashcode，
定位到合适的数组索引，然后再在该索引上的单向链表进行循环遍历用equals比较key是否存在，
如果存在则用新的value覆盖原值，如果没有则向后追加。
HashMap的两个重要属性是容量capacity和加载因子loadfactor，默认值分布为16和0.75，
当容器中的元素个数大于 capacity*loadfactor时，容器会进行扩容resize 为2n，
在初始化Hashmap时可以对着两个值进行修改，负载因子0.75被证明为是性能比较好的取值，
通常不会修改，那么只有初始容量capacity会导致频繁的扩容行为，这是非常耗费资源的操作，
所以，如果事先能估算出容器所要存储的元素数量，最好在初始化时修改默认容量capacity，
以防止频繁的resize操作影响性能。



散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系f，
使得每个关键字key 对应一个存储位置f (key)。查找时，
根据这个确定的对应关系找到给定值key 的映射f (key) ，
若查找集合中存在这个记录，则必定在f (key) 的位置上。
这里我们把这种对应关系f 称为散列函数， 又称为哈希(Hash) 函数。
按这个思想，采用散列技术将记录存储在一块连续的存储空间中，
这块连续存储空间称为散列表或哈希表(Hash table)。
 那么关键字对应的记录存储位置我们称为散列地址。


整个散列过程其实就是两步。
(1) 在存储时，通过散列函数计算记录的散列地址，并按此散列地址存储该记录。
(2) 当查找记录时，我们通过同样的散列函数计算记录的散列地址，
按此散列地址访问该记录。由于存取用的是同一个散列函数， 因此结果当然也是相同的。


Hash算法就是根据某个算法将一系列目标对象转换成地址，
当要获取某个元素的时候，只需要将目标对象做相应的运算获得地址，直接获取。

https://www.cnblogs.com/dreamroute/p/3843600.html
https://www.cnblogs.com/chengxiao/p/6059914.html



18.hashCode()和equals()方法的重要性体现在什么地方？
Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，
当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法
两个不同的键可能会有相同的hash值，
因此，可能会被集合认为是相等的。而且，这两个方法也用来发现重复元素。
所以这两个方法的实现对HashMap的精确性和正确性是至关重要的。


