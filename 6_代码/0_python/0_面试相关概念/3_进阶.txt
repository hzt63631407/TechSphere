
1.迭代器和生成器
迭代器：

迭代器：实现了__iter__()方法和next()方法的对象。
可迭代对象：只实现了__iter__()方法，iter方法返回迭代器对象。

迭代器一定是个可迭代对象，但可迭代对象不一定是迭代器。
我们使用最多的 list、tuple、set、dict 类型，都只是「可迭代对象」，但不是「迭代器」，
因为它们都是把迭代细节交给了另外一个类，这个类才是真正的迭代器。

https://zhuanlan.zhihu.com/p/319402935

test_list = [1, 3, 5, 7]
test_iter = iter(test_list)
#iter函数会返回一个迭代器对象，iter()是python内置函数，类似sorted，dir，len
print(next(test_iter))
#从迭代器中取值,让迭代器去获取l中的一个元素

用途：如果有一个文件特别大，可以读取某一部分，不必全部加载到内存。
节约内存（循环过程中，数据不用一次读入，
在处理文件对象时特别有用，因为文件也是迭代器对象）




生成器：
1.要创建一个生成器，有很多种方法。第一种⽅法很简单，只要把一个列表生成式的 [ ] 改成 ( )
第二种使用了 yield 的函数被称为生成器（generator）。
2.生成器本身是一种特殊的迭代器，也就是说生成器就是迭代器。
3.生成器会自动实现迭代器协议，也就是说只要我们yield后，
自动就生成了next对象包括StopIteration等结构。


yield的作用是什么
1. 装饰器使用的返回值，类似于 return方法
2. 使前置与后置处理分开
每次遇到 yield 时函数会暂停并保存当前所有的运行信息，
返回 yield 的值，下次调用的时候从yield下面的代码开始执行。


生成器和迭代器的用途是一样的，节省内存。
只是代码更简介。参考python，迭代器，fab。


区别：
迭代器是访问容器的一种方式，也就是说容器已经出现，比如说list。
进行迭代使用。
而生成器则是，而生成器则是自己生成元素的，需要自己构建一个生成器
也就是前者是从有到有的复制，而后者则是从无到有的生成。

Python中的生成器可以理解为一个更优雅的迭代器(不需要实现__iter__和__next__方法)，
实现了迭代器协议，它也可以通过next()产出元素。





2.协程
todo:
https://www.cnblogs.com/dsynb/p/16218995.html

协程是python个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元

协程和线程差异

在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。
操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，
操作系统还会帮你做这些数据的恢复操作。
所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，
所以一秒钟切换个上百万次系统都抗的住。



3.你了解flask嘛？
python的web框架，项目中没有练过，但我自己平时自己有搭建过，
框架有static 静态文件和python的文件 server.py，
（static是前端，主要是html和css，js，html就是标签，css就是处理样式
js就是用于交互，（vue，bootstrap，emlment UI）
相当于mcv里的view，视图层，server.py就是mcv里的mc，
m是模型，连接数据库的，c是Controller，来处理业务的逻辑的）
如果有需要，我可以再深入了解一些，毕竟是python的框架，学起来也比较快。
(企业用djgo比较多)



4.什么是mcv模型
我了解过mcv模型，
m是modle模型，c是Controller控制，view是视图。
modle主要是用来与数据库交互的，是python写的
Controller就是处理业务的逻辑，
view一般是用前端语言来编写，比如说react.js。


5.什么是wsgi
Python Web Server Gateway Interface，翻译过来是Python web服务器网关接口，
实际上就是一种协议，我们的应用(Django,Flask)实现了WSGI，
就可以配合实现了WSGI(uWSGI,gunicorn)的服务器工作了


6.mysql
python通过mysql.connector这个库来获取光标。
然后通过光标来执行select，update这些语句。


7.请列出你会的任意一种统计图（条形图、折线图等）绘制的开源库，第三方也行？
pychart、matplotlib


8、提高Python运行效率的方法？
1、使用生成器，因为可以节约大量内存；
2、使用内置函数和库。
3、循环代码优化，避免过多重复代码的执行；
4、多个if elif条件判断，可以把最有可能先发生的条件放到前面写，这样可以减少程序判断的次数，提高效率。


9.我接触过numpy，学习过一点机器学习。
NumPy 包含大量的各种数学运算的函数，包括三角函数，算术运算的函数，复数处理函数等。




todo:python getattr