
1.进程和线程
进程：进程是操作系统资源分配的基本单位。
线程：线程是任务调度和执行的基本单位。

关系：
1.一个进程有一个或多个线程
2.线程之间的内存是共享的。
但是可能会有线程安全的问题，需要进行线程同步，
多个线程修改同一个变量的时候需要进行加锁。
3.进程之间的内存是不共享的，每个进程都有自己的地址空间、内存、数据栈。
所以进程之间需要通过消息队列,共享数据，socket这样的方式来进行通信。
https://zhuanlan.zhihu.com/p/446374478
4.进程之间的切换开销大，而线程切换开销比较小。


多线程场景：
1.使用到多任务的时候，就需要用到多进程，多线程。
比如我们有io操作，网络请求等，这种时候需要会用到多进程，
2.有并发操作


为什么要多线程：
1.因为我们cpu计算速度快，但是硬盘，网络io的速度慢，所以会出现有很长
的时间在等待io或者说在等待网络请求的返回。
2.在这个时间我们可以采用多线程的方式来执行其他任务。




创建线程
1.写一个方法，用threading的方法调用
2.继承threading类

1.通过threading.Thread进行创建多线程
import threading
t = threading.Thread(target=target)
t.start()
t.join()


2.通过继承threading.Thread，然后重写__init__方法和run方法：
class myThread(threading.Thread):
    def __init__(self, threadID, name, counter):

thread1 = myThread(1, "Thread-1", 1)
thread1.start()
thread1.join()




阻塞非阻塞说的程序在等待调用结果（消息，返回值）时的状态.
（阻塞和非阻塞强调的是客户端会不会继续执行）

阻塞： 程序在等待调用结果（消息，返回值）时的状态.
非阻塞：该调用不会阻塞当前线程，发送方进程调用send()后，立即就可以其他操作。



同步和异步说的是消息的通知机制
同步与异步是对应于调用者与被调用者，两个线程之间要么是同步的，要么是异步的

同步：线程调用IO接口后，在没有得到结果前，该调用就不会返回
正常的编写的函数都是同步的，阻赛型io，
调用了之后，需要等待这个结果返回，然后才能执行后面的代码

（自己理解）
主线程请求后，进行其他操作，然后再开启一个子线程对结果进行查询（但属于没有必要，实际不应用）

同步也有非阻赛io，可以采用轮询的方式来。



异步：线程调用IO接口后，这个调用就先返回了一个，服务器接着计算，然后再通过方式获得结果。
异步就是异步！（异步阻塞，实际不应用）
异步不会阻塞，因为会立即返回一个。

异步实现的机制：
1.客户端用其他接口进行轮训查询
https://blog.csdn.net/weixin_32348697/article/details/114174188
客户端：进行请求，会立即返回，再通过多线程的方式获取真实数据返回。
服务器：先返回取货凭证，返回进行计算，计算返回真实的货物。

客户端这里用多线程，多线程是实现异步的方式。



2.你给他们一个回调的地址，他做完之后通过这个地址返回信息给你
调用方会给被调用方提供一个回调接口，意思是“你处理时间比较长，
等你处理完以后，再调用这个回调接口，通知我结果吧！”




（3.我们写服务器的接口一般都是异步/非阻塞的，因为需要同时处理多个用户，
不能处理某一个用户然后其他的用户不处理了。）



https://blog.csdn.net/xishilife/article/details/119643817
回调分为同步回调和异步回调
回调是一种双向的调用方式, 其实而言, 回调也有同步和异步之分,
讲解中是同步回调, 第二个例子使用的是异步回调

通俗而言: 就是A类中调用B类中的某个方法C,
然后B类中反过来调用A类中的方法D, D这个方法就叫回调方法（callback方法）

异步调用需要在我们调用第三方API处, 开启一个新的线程即可,
而同步调用和平常的调用没有任何区别.




