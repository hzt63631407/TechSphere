
1.内存工作原理
内存 是由一小块一小块的组成的矩阵
数组 连续的内存地址
随机分配的 链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起

ArrayList就是动态数组，也是一个对象。
创建一个ArrayList对象，该对象存放在堆内存中，且是一个内存连续的内存区域。
1、ArrayList是用数组实现的，这个数组的内存是连续的，不存在相邻元素之间还隔着其他内存。
2、索引ArrayList时，速度比原生数组慢是因为你要用get方法，这是一个函数调用，而数组直接用[ ]访问，相当于直接操作内存地址，速度当然比函数调用快。
3、新建ArrayList的时候，JVM为其分配一个默认或指定大小的连续内存区域（封装为数组）。
4、每次增加元素会检查容量，不足则创建新的连续内存区域（大小等于初始大小+步长），也用数组形式封装，并将原来的内存区域数据复制到新的内存区域，
然后再用ArrayList中引用原来封装的数组对象的引用变量引用到新的数组对象：

分而治之
将这块地均匀地分成方块，且分出的方块要尽可能大。
适用于这小块地的最大方块，也是适用于整块地的最大方块
1.找出基线条件，这种条件必须尽可能简单。
2.不断将问题分解(或者说缩小规模)，直到符合基线条件。