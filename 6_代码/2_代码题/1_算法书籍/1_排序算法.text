堆排序是渐进最优的比较排序算法，达到了O(nlgn)这一下界，
而快排有一定的可能性会产生最坏划分，时间复杂度可能为O(n^2)，那为什么快排在实际使用中通常优于堆排序？

昨天刚好写了一篇关于快排优化的文章，今天再多做一个比较吧。首先先看一个排序算法图：

排序方法    平均情况    最好情况    最坏情况    辅助空间    稳定性
冒泡排序    O(n^2)  O(n)    O(n^2)  O(1)    稳定
简单选择排序  O(n^2)  O(n^2)  O(n^2)  O(1)    稳定
直接插入排序  O(n^2)  O(n)    O(n^2)  O(1)    稳定
希尔排序    O(nlogn)~O(n^2) O(n^1.3)    O(n^2)  O(1)    不稳定
堆排序 O(nlogn)    O(nlogn)    O(nlogn)    O(1)    不稳定
归并排序    O(nlogn)    O(nlogn)    O(nlogn)    O(n)    稳定
快速排序    O(nlogn)    O(nlogn)    O(n^2)  O(logn)~O(n)    不稳定

可以看到，到达nlogn级别的排序算法，一共有三种，
分别是堆排序，归并排序以及快速排序，其中只有归并排序最稳定。那么，为什么要说快速排序的平均情况是最快的呢？
实际上在算法分析中，大O的作用是给出一个规模的下界，而不是增长数量的下界。
因此，算法复杂度一样只是说明随着数据量的增加，算法时间代价增长的趋势相同，并不是执行的时间就一样，
这里面有很多常量参数的差别，比如在公式里各个排序算法的前面都省略了一个c，这个c对于堆排序来说是100，
可能对于快速排序来说就是10，但因为是常数级所以不影响大O。


查找算法：
https://www.cnblogs.com/yw09041432/p/5908444.html
https://www.cnblogs.com/feixuelove1009/p/6148357.html
https://zhidao.baidu.com/question/490273951.html
