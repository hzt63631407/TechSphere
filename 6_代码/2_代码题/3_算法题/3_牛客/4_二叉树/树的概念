
深度：DFS
广度：BFS

广度优先
就是层序遍历

深度遍历有几种

先序遍历
根节点->左子树->右子树

中序遍历
左子树->根节点->右子树

后序遍历
左子树->右子树->根节点


二叉搜索树又称二叉排序树，具有以下性质：
若它的左子树不为空，则左子树上所有节点的值都小于根节点的值
若它的右子树不为空，则右子树上所有节点的值都大于根节点的值
它的左右子树也分别为二叉搜索树
注意：二叉搜索树中序遍历的结果是有序的

一、平衡二叉树
平衡二叉搜索树又被称为AVL树，且具有以下性质：
它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，
并且左右两个子树都是一棵平衡二叉树


二、完全二叉树(bm 35 )
给定一个二叉树，确定他是否是一个完全二叉树。
完全二叉树的定义：若二叉树的深度为 h，除第 h 层外，其它各层的结点数都达到最大个数，
第 h 层所有的叶子结点都连续集中在最左边，这就是完全二叉树。（第 h 层可能包含 [1~2h] 个节点）
注意：完全二叉树用层序遍历


# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

s = TreeNode('1')
l = TreeNode('2')
r = TreeNode('3')
s.left = l
s.left = r