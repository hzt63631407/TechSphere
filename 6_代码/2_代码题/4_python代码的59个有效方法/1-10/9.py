# -*- coding: utf-8 -*-
# Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。

# 第9条，用生成器表达式来改写数据量较大的列表推导
# 其他-迭代

# https://www.zhihu.com/question/20829330
# https://blog.csdn.net/m0_47670683/article/details/108989691
# 实现了__next__方法的是迭代器
# 迭代器不像列表一次性把数据都加载到内存，而是以一种延迟计算的方式返回元素，等到调用next方法时候才返回该元素。
# 参考 其他-迭代-fab1

# 可迭代的 Iterable 实现方法 __iter__                       list继承了这个方法 使用dir() 可以查看类的所有方法
#
# 迭代器   Iterator 实现方法 __next__ __iter__
#
# 可迭代的对象一定不能是自身的迭代器。也就是说，可迭代的对象必须实现__iter__，但不能实现__next__.

# Python中的可迭代对象有：列表、元组、字典、字符串；常结合for循环使用；

# 三、可迭代对象与迭代器的优劣比较
#
# 可迭代对象的优点：
#
# 访问速度快。
# 访问方式灵活，可多次、重复、任意选择范围访问。
# 内置方法和函数比较多。
# 可迭代对象的缺点：
#
# 耗费内存。
# 取值过于灵活(有时会引起报错，如index out of range、TypeError等)。
# 迭代器的优点：
#
# 节省内存。
# 惰性取值(一次固定取一条数据，直到取值完毕报StopIteration，不会引发报错)。
# 迭代器的缺点：
#
# 访问速度慢。
# 访问方式死板，只能访问下一条不能访问上一条。
# 内置方法和函数比较少。
# 四、可迭代对象与迭代器如何抉择
#
# 在存储数据相对少(8g内存可承受几百万个对象)，侧重对数据灵活处理时，将数据集设为可迭代对象更好。
# 当数据量大到足以撑爆内存(几千万甚至上亿个对象时)，侧重节省内存时，将数据集设为迭代器更好。
