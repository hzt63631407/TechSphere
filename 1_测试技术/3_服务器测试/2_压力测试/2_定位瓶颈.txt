

有瓶颈的原因：
有性能瓶颈，本质是资源不够用，因为程序运行需要资源。


定位瓶颈的现象：
1.吞吐量不再随着并发增加而增加，或者响应时间，错误率，有异常
2.服务器资源占用率过高


定位瓶颈的步骤：
分层思维
1.先看发压机的硬件资源，cpu，内存，带宽，
然后看本身程序的资源，比如说：jemter的内存有没有溢出或则报错
（jemter是用的jvm）
2.接着你看网关层硬件资源，cpu，内存，带宽，还有本身的程序的资源。
3.然后就是java程序层，jvm的内存
中间件redis，缓存击穿，缓存雪崩。
mq，消息堆积。
最后是数据库，有没有慢查询。



性能调优例子：
（协助开发一起，自己是定位问题，提供思路，改还是开发改）
发现mysql的机器cpu过高，也有慢查询的日志。（一般设置的是0.5s）
开始对mysql进行优化。
我们当时先调节了mysql的连接数，发现降低连接数性能并少了
还有就是优化了一些sql语句。
比如减少模糊查询（like * ，%），多表查询。
还有我们的开发加了一些索引。

当时我们也郁闷了，后来查了一下，其实这跟cpu运行原理有关
cpu是4核或者是8核的，他实际运行只有4个线程或者8个线程，就是在不停的切换，
因为我们连接数少，所以就切换的少，减少了上下文切换的消耗
https://blog.csdn.net/fengyuyeguirenenen/article/details/124180679



wifi自动下载带宽够么？
带宽够的，下载的有做一定限速



可能出现的问题
https://www.cnblogs.com/imyalost/p/10850811.html



常用的系统操作响应时间：

打开一个网站	几秒
在数据库中查询一条记录(有缩印的情况下)	十几毫秒
机械磁盘的一次寻址	4毫秒
在机械磁盘顺序读取1MB的数据	2毫秒
在SSD磁盘顺序读取1MB的数据	0.3毫秒
在远程分布式Redis服务器读取一条数据	0.5毫秒
在内存读取1MB的数据	十几毫秒
Java程序中方法的本地方法的调用	几毫秒
网络中传输2KB的数据	1毫秒












