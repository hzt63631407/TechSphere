



问题需要先明确，要加机器还是需要进行调优。


性能调优：
分为：代码调优，配置调优


1.网络带宽调优
调优思路：修改返回内容的大小。

如何检查两个服务器网络带宽：
安装ipef3软件 测试出5m带宽
网络监控的工具ifop 可以监控单个应用的程序的网络流量

网络带宽单位是bps（bit/s）
普通单位是byte
1byte=8bit
100m带宽是12.5mb/s

传输内容大小
1.单次响应内容大小：0.33kb
2.http头的大小 1kb
总共1.33kb

（可以通过liunx设置网络带宽）

CDN、加速、视频、游戏、软件下载、音乐在线视听、
flash、在线影视等类型建议选择50M带宽以上。

磁盘：
读的速度 150mb/s
写的速度 15mb/s
远高于网络速度



2.java程序调优
一般不建议修改配置，修改代码。

通过查看jvm的内存分配（具体参考jvm）
排查思路（没有oom）
可以使⽤jmap来查看JVM中各个区域的使⽤情况；看看堆和栈的内存使用情况，看看那个用的多。
可以通过jstack来查看线程的运⾏情况，⽐如哪些线程阻塞、是否出现了死锁；
可以通过jstat命令来查看垃圾回收的情况，

如果是oom了,判断堆还是栈溢出：
https://blog.csdn.net/weixin_42615154/article/details/109454317
（当出现了outofmemoryerror是设置生成（快照）文件，保存内存时的文件。）

调优思路：
https://blog.csdn.net/weixin_69413377/article/details/126194396


性能测试中，吞吐量出现了波浪状
1.怀疑是 jvm垃圾回收导致了stw
2.（90%的情况）最优先的是让开发从编码的角度优化代码，减少内存占用，服用内存
3.再去优化gc
切换不同的垃圾回收器，这个是用的最多的gc方面的优化手段
gc-参数很多，调了某一个参数，不一定管用。多次配置，反复尝试。


jvm也可以用
也可以用grafana+promthemus监控




3.redis、mq调优
redis
处理命令时采用单线程，所以不需要大量redis连接
不要使用复杂的命令操作

mq
使用调优和参数调优，参考官方文档
如：消费速度慢，加机器，加并行进程
如：jvm调优




4.mysql调优
什么时候觉的数据库是瓶颈：响应时间（本质是应用服务器和数据库的连接）

（协助开发一起，自己是定位问题，提供思路，改还是开发改）
发现mysql的cpu过高，也有慢查询的日志。（一般设置的是0.5s）
开始对mysql进行优化。
我们当时先调节了mysql的连接数，发现降低连接数性能并少了
还有就是优化了一些sql语句。
比如减少模糊查询（like * ，%），多表查询。
还有我们的开发加了一些索引。


一般情况下，我们把查询时间超过1s的查询称为慢查询。
如果压测数据量大，才会有慢查询的问题，需要建立索引。
线上项目随着时间的推移，数据库的量大，可能会有慢查询的问题。



服务器上用liunx命令具体排查：
可以查看用top查看，一般是java进程
（如果是4核，400%，gafafa是100%）
top - H -p 79478(进程号)

java程序cpu过高，查看日志。
（如：java 连接数问题）




性能调优
https://blog.csdn.net/blackbattery/article/details/82291542
https://www.cnblogs.com/mzsg/tag/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/


