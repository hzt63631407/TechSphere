



perfdog介绍：
https://blog.csdn.net/nitefullsand/article/details/106138326


perdog使用细节视频
https://www.bilibili.com/video/BV1yD4y1o78J/


perfdog services是开放的
https://blog.csdn.net/qq_34696203/article/details/108719676


性能测试平台
https://testerhome.com/topics/36157



android:
cpu：app占cpu的利用率
CPU Usage：传统CPU利用率，也叫未规范化CPU利用率
(一般Android Studuio或Adb等获取的CPU利用率都是未规范化CPU利用率。)
CPU Usage = CPU执行时间/CPU总时间。

CPU Usage(Normalized)：规范化CPU利用率
由于移动设备CPU频率时刻变化，用传统CPU利用率计算方法，假定在低频率时刻计算出CPU利用率=30%，
和在CPU高频时刻计算出CPU利用率=30%。同样都是30%但性能消耗是完全不样的，
明显高频消耗更高。传统CPU利用率已无法真实反映性能消耗。
所以我们需要一种规范化(可量化)的统计方式。将频率因素考虑进去。
CPU Usage(Normalized) = (CPU执行时间/CPU总时间) * (当前时刻所有CPU频率之和/所有CPU频率最大值之和)。
https://perfdog.qq.com/article_detail?id=10088&issue_id=0&plat_id=1

内存：app占用的内存
Memory
(PSS Memory，统计结果和Android Java API标准结果一致，与Meminfo也一致）



iOS:
PerfDog统计的是传统CPU利用率，CPU Usage默认为未规范化CPU利用率。
由于iOS平台，频率变化一般是在电池电量极低，
锁屏等极端情况下才出现。所以规范化没有很大意义。

Memory (是统计FootPrint，注：OOM与FootPrint有关，与系统、机型无关。
只与RAM有关，如1G内存机器。FootPrint超过650MB，引发OOM）。

Wakeups(线程唤醒次数。注：超过150进程很大可能会被系统kill。
特别是iOS13.2闷杀后台进程事件，建议重点关注)

FPS:也可以理解为我们常说的“刷新率。每秒动画或者视频的画面数。
平均值标准是50.
FPS高，未必流畅，没有必然联系，因为可能不是平均的，变化造成卡顿。
比如说你在60帧，然后突然到30帧，突然又到60帧，在这一瞬间就可能特别卡顿。




perfdog的原理
1.PerfDog 是一种用于获取 Android 应用性能数据的工具，
它并不是通过直接调用 adb 命令来获取性能数据的。
下面是 PerfDog 获取性能数据的原理：
Instrumentation API：PerfDog 使用 Android 的 Instrumentation API，
这是 Android 平台提供的一组 API，用于监测和测量应用程序的性能指标。

Instrumentation API 允许开发者在应用程序代码中插入性能测量点，并收集各种性能数据，
如 CPU 使用率、内存使用、网络请求等。
PerfDog 通过调用 Instrumentation API 中的方法来启动性能数据的收集和监测。

2.ios获取性能测试，底层也是instument



