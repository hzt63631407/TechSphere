



1.https://testerhome.com/topics/4944
2.https://blog.csdn.net/u012439446/article/details/107333058



客户端性能监控：
卡顿监控：
① APP UI线程消息机制
APP UI线程是Looper线程，线程中维护一个消息队列，Looper在循环消费消息队列中的任务，
如果消息队列中存在耗时的操作，将会影响UI任务的绘制，导致界面出现卡顿。
卡顿原因：
1.UI布局层次太深,
2.过度绘制  原因：像素被多次绘制。
3.ui线程执行了io操作，
4.复杂的数据处理，
5.短时间内创建大量对象进入新生区、导致频繁的GC。
https://blog.csdn.net/chenrong666/article/details/124475751
https://blog.csdn.net/jdcdev_/article/details/109555032

② 采集UI线程消息的运行时长
移动端（Android/iOS）都是采用了AOP的思想，对整个UI线程的消息处理过程进行了监控，
采集到了每个消息的执行时间。

③ 卡顿条件（消息执行时间 > 卡顿阈值）（2s）
在采集到每个消息的执行时间后，自动进行卡顿阈值比较，
超过阈值的消息被认为该消息执行时间过长，会引发主线程卡顿。

④ 采样
在执行主线程的同时，采样线程对主线程的堆栈、cpu等信息进行周期采样。
但是采样线程要先休眠一段时间，
这样做的最主要原因就是为了不对主线程大部分的短消息进行打扰，
抢夺cpu资源，造成性能降低

一次业务请求包含：准备请求数据->发送请求->网络链路->请求回调->解析->渲染，




启动时间监控：
启动监控采用了无侵入式打点方式分为了三个阶段，
第一阶段：记录了Application的初始化阶段耗时；
第二阶段：记录了Application初始化完成后到用户首页开始创建的耗时；
第三阶段：记录了首页开始创建到完全展示过程的耗时；

页面加载时间：
埋点方式，Hertz通过一个配置文件配置每个页面对应的API，在API请求的基类中统一埋点

网络性能:
Spring的Aop编程思想可以获取每个接口的请求内容，时间等数据。
（AOP的主要应用场景为：日志记录，权限验证，接口调用情况监控，系统统一异常处理…）

针对URLConnection、CFNetwork、NSURLSession三种网络做Hook，
hook的具体技术可以是method swizzle 也可以是Proxy、Fishhook之类的


网络监控/页面渲染时间：
https://blog.csdn.net/qihoo_tech/article/details/94401344
https://www.jianshu.com/p/8123fc17fe0e