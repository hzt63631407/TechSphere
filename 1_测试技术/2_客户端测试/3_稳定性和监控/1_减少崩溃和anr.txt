



开发角度：代码的减少
测试角度：建立完整的监控体系


1.减少/避免anr：
activity
1.主线程只做UI相关的操作,避免耗时操作。
在activity的关键的生命周期方法：onCreate 和 onResume方法上尽可能处理越少越好的事情。
下面列举的操作都是长时间运行的：网络工作、数据库操作、精确的计算，
例如重新定制图片（应该在单独的工作线程中）、或者通过异步请求操作数据库的情况下。
(可以采用重新开启子线程的方式，
然后使用Handler+Message的方式做一些操作，比如更新主线程中的ui等)

2.主线程可能处于阻塞状态，等待获取锁。
避免主线程跟工作线程发生锁的竞争，减少系统耗时binder的调用。
谨慎使用sharePreference，注意主线程执行provider query操作；

BroadcastReceiver 还有service主线程中，处理复杂的逻辑和计算，
而交给work thread操作。




IOS 和 android 日志抓取
iOS：
1.通过 iTunes Connect
（Manage Your Applications - View Details - Crash Reports）获取用户的 crash 日志
2.通过 Xcode 从你的设备上获得崩溃日志
3.自己在程序中添加崩溃捕捉代码，如果应用集成第三方 SDK，如百度统计
Android：
1.通过集成第三方 SDK，如百度统计、友盟统计等
2、发版时使用加固工具，他们也会收集错误日志，如 360 加固
3、在程序中添加程序异常崩溃的捕捉代码，保存到本地文件中















